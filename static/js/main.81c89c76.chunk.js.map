{"version":3,"sources":["components/navbar.jsx","components/counter.jsx","components/counters.jsx","App.js","serviceWorker.js","index.js"],"names":["NavBar","totalCounters","className","href","Counter","this","getBadgeClasses","formatCount","onClick","props","onIncrement","counter","onDelete","id","classes","value","Component","Counters","onReset","counters","map","key","App","state","handleDelete","counterId","filter","c","setState","handleIncrement","index","indexOf","handleReset","Fragment","length","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","document","getElementById","URL","process","origin","addEventListener","fetch","headers","response","contentType","get","status","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.81c89c76.chunk.js","sourcesContent":["import React, {Component}  from 'react'\r\nconst NavBar = ({totalCounters}) =>{\r\n    return (\r\n        <nav className = \"navbar navbar-light bg-light\">\r\n            <a className = \"navbar-brand\" href = \"#\">\r\n                Total  <span className=\"badge badge-pill badge-secondary\"> {totalCounters}</span>\r\n            </a>\r\n        </nav>\r\n    );\r\n}; \r\n\r\nexport default NavBar;","import React, { Component } from 'react';\r\n\r\nclass Counter extends Component{\r\n    render(){\r\n        return(\r\n        <div>\r\n          <span className = {this.getBadgeClasses()}>{this.formatCount()}</span>\r\n          <button \r\n            onClick = { ()=> this.props.onIncrement(this.props.counter)}\r\n            className = \"btn btn-secondary btn-sm\"\r\n            >\r\n            Increment\r\n          </button>\r\n          <button className = \"btn btn-danger btn-sm m-2\"\r\n             onClick = {()=> this.props.onDelete(this.props.counter.id)}>\r\n              Delete\r\n          </button>\r\n        </div>\r\n        );\r\n    }\r\n\r\ngetBadgeClasses() {\r\n    let classes = \"badge m-2 badge-\";\r\n        classes += this.props.counter.value === 0 ? \"warning\" : \"primary\";\r\n        return classes;\r\n    }\r\n\r\nformatCount(){\r\n    const{value} = this.props.counter;\r\n    return value === 0 ? 'Zero' : value;\r\n}\r\n\r\n\r\n}\r\nexport default Counter\r\n","import React, { Component } from 'react';\r\nimport Counter from './counter';\r\n\r\nclass Counters extends Component{\r\n    render(){\r\n        const {onReset, counters, onDelete, onIncrement} = this.props\r\n        return(<div>\r\n            <button \r\n            className=\"btn btn-primary btn-sm m-2\" \r\n            onClick = {onReset}\r\n            >Reset</button>\r\n            {counters.map(counter => (\r\n            <Counter \r\n            key = {counter.id} \r\n            onDelete = {onDelete} \r\n            onIncrement = {onIncrement}\r\n            counter = {counter}>\r\n            </Counter>    \r\n                ))}\r\n        </div>)\r\n    }\r\n}\r\n\r\nexport default Counters;\r\n\r\n","import React, { Component } from 'react';\nimport NavBar from './components/navbar';\nimport './App.css';\nimport Counters from './components/counters';\n\n\nclass App extends Component {\n  state = {\n    counters :[\n        {id:1,value:0},\n        {id:2,value:0},\n        {id:3,value:0},\n        {id:4,value:0},\n\n    ]\n}\n\nhandleDelete=(counterId)=>{\n    const counters = this.state.counters.filter(c => c.id !== counterId)\n    this.setState({counters})\n};\nhandleIncrement= counter =>{\n    const counters= [...this.state.counters];\n    const index = counters.indexOf(counter);\n    counters[index] = {...counter};\n    counters[index].value++;\n    this.setState({counters})\n\n}\n\nhandleReset=()=>{\n    const counters= this.state.counters.map(c=>{\n        c.value = 0;\n        return c;\n    });\n    this.setState({counters})\n};\n\n  render(){\n  return (\n    <React.Fragment>\n    <NavBar totalCounters = {this.state.counters.filter(c=>c.value > 0).length}/>\n    <main className = \"container\">\n       <Counters \n       counters = {this.state.counters}\n       onReset = {this.handleReset} \n       onIncrement = {this.handleIncrement}\n       onDelete = {this.handleDelete}\n       />\n    </main>\n    </React.Fragment>\n  ) \n}\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.css';\n\nReactDOM.render(<App/>,document.getElementById('root'));\nserviceWorker.register();\n"],"sourceRoot":""}